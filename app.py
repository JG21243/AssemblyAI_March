"""The Python script has the following functionality:

1. **Imports Necessary Libraries**: The script begins by importing required libraries such as `tempfile` for creating temporary files, `os` for operating system interactions, `streamlit` for creating a web interface, `assemblyai` for audio transcription, and `openai` for accessing OpenAI's GPT models.

2. **API Key Configuration**: It sets API keys for two services: AssemblyAI and OpenAI, which are used for audio transcription and language model interactions, respectively.

3. **Streamlit Web Interface Setup**: It uses Streamlit to create a web frontend with the title "Audio Transcription and Summary Generator."

4. **Audio File Upload**: The interface includes a file uploader that allows the user to upload an audio file in either `.m4a` or `.mp3` format.

5. **Audio File Handling**: Once an audio file is uploaded, the script writes the file to a temporary file using the `tempfile` module.

6. **Transcription with AssemblyAI**: The script uses the AssemblyAI client to transcribe the audio content into text. It then prints the transcript and removes the temporary audio file.

7. **Display Transcript**: The transcribed text is displayed to the user under a "Transcript" subheader in the Streamlit interface.

8. **User Interaction**: The user can enter a question related to the uploaded and transcribed audio file in a text input field.

9. **Question Answering with OpenAI**: If the user provides a question, the script uses the OpenAI client to generate an answer from the GPT-4 language model. It constructs a series of messages to compose the input for the language model, which includes instructions, context (transcription), and the user's question. The model is prompted to provide a concise and readable answer using Markdown syntax for text formatting.

10. **Display Answer**: Finally, the answer generated by the GPT-4 model is displayed to the user under the "Assistant's Answer" subheader.

Throughout this process, Streamlit makes it easy to have user interactions, file uploads, and display information back to the user in a web interface. The script serves as a tool for providing transcriptions of audio files and answering questions based on that transcription."""

# Import necessary libraries
import tempfile
import os
import streamlit as st
import streamlit as st
import assemblyai as aai
from openai import OpenAI
import streamlit as st

openai_key = st.secrets["general"]["openai_key"]

assemblyai_key = st.secrets["assemblyai"]["key"]
client = OpenAI

# Set API keys for AssemblyAI and OpenAI

# Streamlit interface
st.title("Audio Transcription and Summary Generator")

# Upload audio file
uploaded_file = st.file_uploader("Choose an audio file", type=["m4a", "mp3"])

if uploaded_file is not None:
    st.write("File successfully uploaded. Transcribing...")
    
    # Create a temporary file and write the uploaded file's bytes to it
    tfile = tempfile.NamedTemporaryFile(delete=False)
    tfile.write(uploaded_file.read())
    
    # Transcribe audio file
    transcriber = aai.Transcriber()
    transcript = transcriber.transcribe(tfile.name)
    context = transcript.text
    print(transcript.text)

    # Remove the temporary file
    os.unlink(tfile.name)

    # Display transcript
    st.subheader("Transcript")
    st.write(context)

    # User input for question
    user_question = st.text_input("Enter your question:")
    
    if user_question:
        st.write("Generating answer...")
        
        # Generate answer
        def generate_answer(context_data, user_question):
            try:
                response = client.chat.completions.create(model="gpt-4",
                messages=[
                    {
                        "role": "system",
                        "content": "You are a friendly research assistant. Your task is to use the provided context (an AI transcription of a user-uploaded audio file) to answer the user's questions accurately in an organized, concise, readable format. Always use markdown syntax like **bold** to improve readability."
                    },
                    {
                        "role": "assistant",
                        "content": f"Here is the context: {context_data}"
                    },
                    {
                        "role": "user",
                        "content": user_question
                    }
                ],
                max_tokens=5000,
                n=1,
                stop=None,
                temperature=0.0)
                return response['choices'][0]['message']['content'].strip()
            except Exception as e:
                return str(e)
        
        # Display assistant's answer
        assistant_answer = generate_answer(context, user_question)
        st.subheader("Assistant's Answer")
        st.write(assistant_answer)
